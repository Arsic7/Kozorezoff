import logging
import re

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TIME, TASK, DELETE_TIME, EDIT_CHOICE, EDIT_TIME, EDIT_TASK = range(6)
user_tasks = {}


def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],
        ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
        ["–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", "–ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)


def is_valid_time(time_str):
    return bool(re.match(r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$", time_str))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚è∞ –ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìã –°–ø—Ä–∞–≤–∫–∞:\n"
        "1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—á—É\n"
        "2. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏\n"
        "3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É\n"
        "4. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
        "5. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
        "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 12:30)"
    )
    await update.message.reply_text(help_text)
    return ConversationHandler.END


async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú –ó–∞–¥–∞—á–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12:30 –û–±–µ–¥")
    return TIME


async def add_task_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if not re.match(r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9] .+", text):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú –ó–∞–¥–∞—á–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12:30 –û–±–µ–¥")
        return TIME

    time, task = text.split(' ', 1)
    user_id = update.effective_user.id
    if user_id not in user_tasks:
        user_tasks[user_id] = {}
    user_tasks[user_id][time] = task
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {time} - {task}", reply_markup=get_main_keyboard())
    return ConversationHandler.END


async def edit_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    tasks = "\n".join([f"{i + 1}. {time} - {task}" for i, (time, task) in enumerate(user_tasks[user_id].items())])
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{tasks}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:")
    return EDIT_CHOICE
async def edit_task_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        choice = int(update.message.text) - 1
        task_list = list(user_tasks[user_id].items())
        if 0 <= choice < len(task_list):
            context.user_data['edit_time'] = task_list[choice][0]
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
            return EDIT_TIME
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return EDIT_CHOICE
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–π:")
        return EDIT_CHOICE
async def edit_task_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_time = update.message.text
    if not is_valid_time(new_time):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return EDIT_TIME
    context.user_data['new_time'] = new_time
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return EDIT_TASK
async def edit_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    old_time = context.user_data['edit_time']
    new_time = context.user_data['new_time']
    new_task = update.message.text
    if old_time in user_tasks[user_id]:
        del user_tasks[user_id][old_time]
    user_tasks[user_id][new_time] = new_task
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_time} - {new_task}", reply_markup=get_main_keyboard())
    return ConversationHandler.END


async def remove_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12:30")
    return DELETE_TIME


async def remove_task_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text
    user_id = update.effective_user.id
    if not is_valid_time(time):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12:30")
        return DELETE_TIME
    if user_id in user_tasks and time in user_tasks[user_id]:
        del user_tasks[user_id][time]
        await update.message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {time}", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=get_main_keyboard())
    return ConversationHandler.END


async def view_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        await update.message.reply_text("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ!", reply_markup=get_main_keyboard())
        return ConversationHandler.END

    tasks = "\n".join([f"‚è∞ {time} - {task}" for time, task in sorted(user_tasks[user_id].items())])
    await update.message.reply_text(f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{tasks}", reply_markup=get_main_keyboard())
    return ConversationHandler.END


async def clear_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_tasks:
        user_tasks[user_id].clear()
    await update.message.reply_text("üßπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ!", reply_markup=get_main_keyboard())
    return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        return await add_task_start(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        return await remove_task_start(update, context)
    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É":
        return await edit_task_start(update, context)
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        return await view_schedule(update, context)
    elif text == "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë":
        return await clear_schedule(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_main_keyboard())
        return ConversationHandler.END


def main():
    application = Application.builder().token("8014681068:AAF1nDtwPnW9G-5Hpy6wRD3oa8AqOtJF-AU").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    conv_handler_add = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task_start)],
        states={
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_time)],
        },
        fallbacks=[]
    )

    conv_handler_edit = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É$"), edit_task_start)],
        states={
            EDIT_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task_choice)],
            EDIT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task_time)],
            EDIT_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task_description)]
        },
        fallbacks=[]
    )

    conv_handler_remove = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É$"), remove_task_start)],
        states={
            DELETE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_task_time)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler_add)
    application.add_handler(conv_handler_edit)
    application.add_handler(conv_handler_remove)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == "__main__":
    main()
